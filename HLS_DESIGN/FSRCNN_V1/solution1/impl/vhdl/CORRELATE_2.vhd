-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CORRELATE_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    prev_output_channel_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    prev_output_channel_V_ce0 : OUT STD_LOGIC;
    prev_output_channel_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    filter_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filter_V_ce0 : OUT STD_LOGIC;
    filter_V_q0 : IN STD_LOGIC_VECTOR (6 downto 0);
    correlate_img_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    correlate_img_V_ce0 : OUT STD_LOGIC;
    correlate_img_V_we0 : OUT STD_LOGIC;
    correlate_img_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of CORRELATE_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_640 : STD_LOGIC_VECTOR (10 downto 0) := "11001000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv23_A3E : STD_LOGIC_VECTOR (22 downto 0) := "00000000000101000111110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv12_34 : STD_LOGIC_VECTOR (11 downto 0) := "000000110100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv11_19 : STD_LOGIC_VECTOR (10 downto 0) := "00000011001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal index_fu_177_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_reg_489 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln49_fu_183_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln49_reg_494 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln46_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_189_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_499 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_y_fu_225_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_y_reg_504 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_87_fu_231_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_reg_509 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_513 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_1_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_1_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_reg_525 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln65_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln65_reg_531 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal select_ln55_1_fu_337_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln55_1_reg_540 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal prev_output_channel_1_reg_545 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_fu_468_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_reg_555 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln71_fu_440_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal select_ln71_1_fu_460_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_0_reg_125 : STD_LOGIC_VECTOR (10 downto 0);
    signal phi_mul_reg_136 : STD_LOGIC_VECTOR (22 downto 0);
    signal phi_urem_reg_147 : STD_LOGIC_VECTOR (10 downto 0);
    signal phi_urem33_reg_159 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1116_5_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln62_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal index_filter_1_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_filter_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_V_1_fu_82 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln50_1_fu_203_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln50_fu_211_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln51_1_fu_221_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln51_fu_217_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln50_fu_211_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln50_fu_199_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln65_fu_261_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln65_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_1_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_fu_288_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_90_fu_299_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_3_fu_295_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1116_4_fu_306_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1116_fu_285_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1116_fu_310_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1116_2_fu_316_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln55_fu_330_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln55_2_fu_362_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln55_3_fu_369_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_fu_376_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_4_fu_359_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln703_fu_388_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln728_fu_384_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal ret_V_fu_392_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln71_fu_428_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln71_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln71_1_fu_448_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln71_1_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln50_fu_211_p10 : STD_LOGIC_VECTOR (11 downto 0);

    component FSRCNN_mul_mul_7sbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;



begin
    FSRCNN_mul_mul_7sbkb_U1 : component FSRCNN_mul_mul_7sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 12,
        dout_WIDTH => 19)
    port map (
        din0 => filter_V_q0,
        din1 => prev_output_channel_1_reg_545,
        dout => r_V_fu_468_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    index_0_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                index_0_reg_125 <= index_reg_489;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                index_0_reg_125 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                phi_mul_reg_136 <= add_ln49_reg_494;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_136 <= ap_const_lv23_0;
            end if; 
        end if;
    end process;

    phi_urem33_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                phi_urem33_reg_159 <= select_ln71_fu_440_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_urem33_reg_159 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                phi_urem_reg_147 <= select_ln71_1_fu_460_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_urem_reg_147 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln49_reg_494 <= add_ln49_fu_183_p2;
                k_y_reg_504 <= k_y_fu_225_p2;
                tmp_87_reg_509 <= k_y_fu_225_p2(6 downto 6);
                tmp_reg_499 <= phi_mul_reg_136(22 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_87_fu_231_p3 = ap_const_lv1_0) and (icmp_ln46_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                and_ln65_reg_531 <= and_ln65_fu_279_p2;
                icmp_ln55_1_reg_519 <= icmp_ln55_1_fu_245_p2;
                icmp_ln55_reg_513 <= icmp_ln55_fu_239_p2;
                tmp_88_reg_525 <= mul_ln50_fu_211_p2(11 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_87_reg_509 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                index_filter_1_fu_78 <= index_filter_fu_409_p2;
                sum_V_1_fu_82 <= ret_V_fu_392_p2(15 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                index_reg_489 <= index_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                prev_output_channel_1_reg_545 <= prev_output_channel_V_q0;
                select_ln55_1_reg_540 <= select_ln55_1_fu_337_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                r_V_reg_555 <= r_V_fu_468_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln46_fu_171_p2, tmp_87_fu_231_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln46_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((tmp_87_fu_231_p3 = ap_const_lv1_1) and (icmp_ln46_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln1116_2_fu_316_p2 <= std_logic_vector(unsigned(zext_ln1116_fu_285_p1) + unsigned(add_ln1116_fu_310_p2));
    add_ln1116_fu_310_p2 <= std_logic_vector(unsigned(zext_ln1116_3_fu_295_p1) + unsigned(zext_ln1116_4_fu_306_p1));
    add_ln49_fu_183_p2 <= std_logic_vector(unsigned(ap_const_lv23_A3E) + unsigned(phi_mul_reg_136));
    add_ln65_fu_261_p2 <= std_logic_vector(unsigned(trunc_ln50_fu_199_p1) + unsigned(ap_const_lv6_2C));
    add_ln71_1_fu_448_p2 <= std_logic_vector(unsigned(phi_urem_reg_147) + unsigned(ap_const_lv11_1));
    add_ln71_fu_428_p2 <= std_logic_vector(unsigned(phi_urem33_reg_159) + unsigned(ap_const_lv11_1));
    and_ln65_fu_279_p2 <= (icmp_ln65_fu_267_p2 and icmp_ln65_1_fu_273_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln46_fu_171_p2)
    begin
        if ((((icmp_ln46_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln46_fu_171_p2)
    begin
        if (((icmp_ln46_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    correlate_img_V_address0 <= zext_ln68_fu_414_p1(6 - 1 downto 0);

    correlate_img_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            correlate_img_V_ce0 <= ap_const_logic_1;
        else 
            correlate_img_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    correlate_img_V_d0 <= ret_V_fu_392_p2(15 downto 4);

    correlate_img_V_we0_assign_proc : process(tmp_87_reg_509, and_ln65_reg_531, ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = and_ln65_reg_531) and (tmp_87_reg_509 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            correlate_img_V_we0 <= ap_const_logic_1;
        else 
            correlate_img_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filter_V_address0 <= sext_ln62_fu_344_p1(5 - 1 downto 0);

    filter_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filter_V_ce0 <= ap_const_logic_1;
        else 
            filter_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln46_fu_171_p2 <= "1" when (index_0_reg_125 = ap_const_lv11_640) else "0";
    icmp_ln55_1_fu_245_p2 <= "1" when (trunc_ln51_fu_217_p1 = ap_const_lv3_0) else "0";
    icmp_ln55_fu_239_p2 <= "1" when (unsigned(trunc_ln50_1_fu_203_p1) < unsigned(ap_const_lv5_5)) else "0";
    icmp_ln65_1_fu_273_p2 <= "1" when (trunc_ln51_fu_217_p1 = ap_const_lv3_4) else "0";
    icmp_ln65_fu_267_p2 <= "1" when (unsigned(add_ln65_fu_261_p2) < unsigned(ap_const_lv6_5)) else "0";
    icmp_ln71_1_fu_454_p2 <= "1" when (unsigned(add_ln71_1_fu_448_p2) < unsigned(ap_const_lv11_19)) else "0";
    icmp_ln71_fu_434_p2 <= "1" when (unsigned(add_ln71_fu_428_p2) < unsigned(ap_const_lv11_5)) else "0";
    index_filter_fu_409_p2 <= std_logic_vector(signed(select_ln55_1_reg_540) + signed(ap_const_lv32_1));
    index_fu_177_p2 <= std_logic_vector(unsigned(index_0_reg_125) + unsigned(ap_const_lv11_1));
    k_y_fu_225_p2 <= std_logic_vector(unsigned(tmp_fu_189_p4) + unsigned(trunc_ln51_1_fu_221_p1));
    lhs_V_fu_376_p3 <= (select_ln55_3_fu_369_p3 & ap_const_lv4_0);
    mul_ln50_fu_211_p1 <= mul_ln50_fu_211_p10(5 - 1 downto 0);
    mul_ln50_fu_211_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln50_1_fu_203_p1),12));
    mul_ln50_fu_211_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv12_34) * unsigned(mul_ln50_fu_211_p1), 12));
    prev_output_channel_V_address0 <= zext_ln1116_5_fu_322_p1(13 - 1 downto 0);

    prev_output_channel_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            prev_output_channel_V_ce0 <= ap_const_logic_1;
        else 
            prev_output_channel_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_392_p2 <= std_logic_vector(unsigned(zext_ln703_fu_388_p1) + unsigned(zext_ln728_fu_384_p1));
    select_ln55_1_fu_337_p3 <= 
        select_ln55_fu_330_p3 when (icmp_ln55_reg_513(0) = '1') else 
        index_filter_1_fu_78;
    select_ln55_2_fu_362_p3 <= 
        ap_const_lv12_0 when (icmp_ln55_1_reg_519(0) = '1') else 
        sum_V_1_fu_82;
    select_ln55_3_fu_369_p3 <= 
        select_ln55_2_fu_362_p3 when (icmp_ln55_reg_513(0) = '1') else 
        sum_V_1_fu_82;
    select_ln55_fu_330_p3 <= 
        ap_const_lv32_0 when (icmp_ln55_1_reg_519(0) = '1') else 
        index_filter_1_fu_78;
    select_ln71_1_fu_460_p3 <= 
        add_ln71_1_fu_448_p2 when (icmp_ln71_1_fu_454_p2(0) = '1') else 
        ap_const_lv11_0;
    select_ln71_fu_440_p3 <= 
        add_ln71_fu_428_p2 when (icmp_ln71_fu_434_p2(0) = '1') else 
        ap_const_lv11_0;
        sext_ln1118_4_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_reg_555),24));

        sext_ln62_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln55_1_fu_337_p3),64));

    tmp_87_fu_231_p3 <= k_y_fu_225_p2(6 downto 6);
    tmp_89_fu_288_p3 <= (tmp_88_reg_525 & ap_const_lv6_0);
    tmp_90_fu_299_p3 <= (tmp_88_reg_525 & ap_const_lv2_0);
    tmp_fu_189_p4 <= phi_mul_reg_136(22 downto 16);
    trunc_ln50_1_fu_203_p1 <= phi_urem_reg_147(5 - 1 downto 0);
    trunc_ln50_fu_199_p1 <= phi_urem_reg_147(6 - 1 downto 0);
    trunc_ln51_1_fu_221_p1 <= phi_urem33_reg_159(7 - 1 downto 0);
    trunc_ln51_fu_217_p1 <= phi_urem33_reg_159(3 - 1 downto 0);
    zext_ln1116_3_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_89_fu_288_p3),12));
    zext_ln1116_4_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_90_fu_299_p3),12));
    zext_ln1116_5_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_2_fu_316_p2),64));
    zext_ln1116_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_y_reg_504),12));
    zext_ln68_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_499),64));
    zext_ln703_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_4_fu_359_p1),25));
    zext_ln728_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_fu_376_p3),25));
end behav;
