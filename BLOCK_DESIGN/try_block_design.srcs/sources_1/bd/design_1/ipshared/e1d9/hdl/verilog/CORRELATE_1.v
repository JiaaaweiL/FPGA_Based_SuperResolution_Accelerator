// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CORRELATE_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        prev_output_channel_V_address0,
        prev_output_channel_V_ce0,
        prev_output_channel_V_q0,
        filter_V_address0,
        filter_V_ce0,
        filter_V_q0,
        correlate_img_V_address0,
        correlate_img_V_ce0,
        correlate_img_V_we0,
        correlate_img_V_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] prev_output_channel_V_address0;
output   prev_output_channel_V_ce0;
input  [11:0] prev_output_channel_V_q0;
output  [3:0] filter_V_address0;
output   filter_V_ce0;
input  [11:0] filter_V_q0;
output  [5:0] correlate_img_V_address0;
output   correlate_img_V_ce0;
output   correlate_img_V_we0;
output  [11:0] correlate_img_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg prev_output_channel_V_ce0;
reg filter_V_ce0;
reg correlate_img_V_ce0;
reg correlate_img_V_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] zext_ln29_fu_202_p1;
reg   [31:0] zext_ln29_reg_400;
wire    ap_CS_fsm_state2;
wire   [6:0] index_output_value_fu_230_p2;
reg   [6:0] index_output_value_reg_408;
wire   [31:0] zext_ln37_fu_242_p1;
reg   [31:0] zext_ln37_reg_413;
wire   [0:0] icmp_ln29_1_fu_224_p2;
wire  signed [8:0] sext_ln37_fu_256_p1;
reg  signed [8:0] sext_ln37_reg_418;
wire  signed [31:0] sext_ln34_fu_260_p1;
wire    ap_CS_fsm_state3;
wire   [1:0] k_x_fu_270_p2;
reg   [1:0] k_x_reg_431;
wire   [8:0] index_filter_fu_276_p2;
reg   [8:0] index_filter_reg_436;
wire   [0:0] icmp_ln34_fu_264_p2;
wire   [13:0] zext_ln1116_7_fu_311_p1;
reg   [13:0] zext_ln1116_7_reg_441;
wire   [6:0] add_ln29_fu_320_p2;
wire   [6:0] add_ln29_1_fu_326_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln37_fu_332_p2;
wire   [31:0] add_ln41_fu_356_p2;
reg   [31:0] add_ln41_reg_469;
wire   [31:0] k_y_2_fu_362_p2;
reg   [31:0] k_y_2_reg_474;
reg  signed [11:0] prev_output_channel_2_reg_479;
wire    ap_CS_fsm_state5;
reg  signed [11:0] filter_V_load_reg_484;
wire    ap_CS_fsm_state6;
reg  signed [6:0] phi_ln29_reg_101;
reg   [6:0] column_index_after_s_reg_113;
reg   [6:0] indvars_iv_reg_125;
reg   [11:0] p_087_0_reg_137;
reg  signed [8:0] index_filter_0_reg_150;
reg   [1:0] k_x_0_reg_161;
reg   [11:0] p_Val2_s_reg_172;
reg  signed [31:0] index_filter_1_reg_184;
reg   [31:0] k_y_0_reg_193;
wire   [63:0] zext_ln44_fu_315_p1;
wire  signed [63:0] sext_ln1116_fu_346_p1;
wire  signed [63:0] sext_ln40_fu_351_p1;
wire   [0:0] icmp_ln29_fu_206_p2;
wire   [6:0] select_ln29_fu_212_p3;
wire   [6:0] add_ln37_fu_236_p2;
wire  signed [7:0] sext_ln29_fu_246_p1;
wire   [7:0] zext_ln29_2_fu_220_p1;
wire   [7:0] add_ln37_1_fu_250_p2;
wire   [7:0] tmp_117_fu_281_p3;
wire   [3:0] tmp_118_fu_293_p3;
wire   [8:0] zext_ln1116_6_fu_301_p1;
wire   [8:0] zext_ln1116_fu_289_p1;
wire   [8:0] add_ln1116_fu_305_p2;
wire   [13:0] trunc_ln1116_fu_337_p1;
wire   [13:0] add_ln1116_3_fu_341_p2;
wire  signed [15:0] grp_fu_391_p3;
wire   [15:0] grp_fu_391_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

FSRCNN_mac_muladdCeG #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
FSRCNN_mac_muladdCeG_U58(
    .din0(filter_V_load_reg_484),
    .din1(prev_output_channel_2_reg_479),
    .din2(grp_fu_391_p2),
    .dout(grp_fu_391_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        column_index_after_s_reg_113 <= 7'd0;
    end else if (((icmp_ln34_fu_264_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        column_index_after_s_reg_113 <= index_output_value_reg_408;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        index_filter_0_reg_150 <= index_filter_reg_436;
    end else if (((icmp_ln29_1_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        index_filter_0_reg_150 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        index_filter_1_reg_184 <= add_ln41_reg_469;
    end else if (((icmp_ln34_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        index_filter_1_reg_184 <= sext_ln34_fu_260_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv_reg_125 <= 7'd3;
    end else if (((icmp_ln34_fu_264_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        indvars_iv_reg_125 <= add_ln29_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_x_0_reg_161 <= k_x_reg_431;
    end else if (((icmp_ln29_1_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_x_0_reg_161 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_y_0_reg_193 <= k_y_2_reg_474;
    end else if (((icmp_ln34_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_y_0_reg_193 <= zext_ln29_reg_400;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_087_0_reg_137 <= p_Val2_s_reg_172;
    end else if (((icmp_ln29_1_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_087_0_reg_137 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_s_reg_172 <= {{grp_fu_391_p3[15:4]}};
    end else if (((icmp_ln34_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_Val2_s_reg_172 <= p_087_0_reg_137;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln29_reg_101 <= 7'd0;
    end else if (((icmp_ln34_fu_264_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln29_reg_101 <= add_ln29_1_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_332_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln41_reg_469 <= add_ln41_fu_356_p2;
        k_y_2_reg_474 <= k_y_2_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        filter_V_load_reg_484 <= filter_V_q0;
        prev_output_channel_2_reg_479 <= prev_output_channel_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        index_filter_reg_436 <= index_filter_fu_276_p2;
        zext_ln1116_7_reg_441[8 : 2] <= zext_ln1116_7_fu_311_p1[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        index_output_value_reg_408 <= index_output_value_fu_230_p2;
        zext_ln29_reg_400[6 : 0] <= zext_ln29_fu_202_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_x_reg_431 <= k_x_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_1_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln37_reg_418 <= sext_ln37_fu_256_p1;
        zext_ln37_reg_413[6 : 0] <= zext_ln37_fu_242_p1[6 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln29_1_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_1_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        correlate_img_V_ce0 = 1'b1;
    end else begin
        correlate_img_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_264_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        correlate_img_V_we0 = 1'b1;
    end else begin
        correlate_img_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        filter_V_ce0 = 1'b1;
    end else begin
        filter_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        prev_output_channel_V_ce0 = 1'b1;
    end else begin
        prev_output_channel_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln29_1_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln34_fu_264_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln37_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_3_fu_341_p2 = (trunc_ln1116_fu_337_p1 + zext_ln1116_7_reg_441);

assign add_ln1116_fu_305_p2 = (zext_ln1116_6_fu_301_p1 + zext_ln1116_fu_289_p1);

assign add_ln29_1_fu_326_p2 = ($signed(phi_ln29_reg_101) + $signed(7'd127));

assign add_ln29_fu_320_p2 = (indvars_iv_reg_125 + 7'd1);

assign add_ln37_1_fu_250_p2 = ($signed(sext_ln29_fu_246_p1) + $signed(zext_ln29_2_fu_220_p1));

assign add_ln37_fu_236_p2 = (column_index_after_s_reg_113 + 7'd3);

assign add_ln41_fu_356_p2 = ($signed(32'd1) + $signed(index_filter_1_reg_184));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign correlate_img_V_address0 = zext_ln44_fu_315_p1;

assign correlate_img_V_d0 = p_087_0_reg_137;

assign filter_V_address0 = sext_ln40_fu_351_p1;

assign grp_fu_391_p2 = {{p_Val2_s_reg_172}, {4'd0}};

assign icmp_ln29_1_fu_224_p2 = ((column_index_after_s_reg_113 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_206_p2 = ((indvars_iv_reg_125 > column_index_after_s_reg_113) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_264_p2 = ((k_x_0_reg_161 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_332_p2 = (($signed(k_y_0_reg_193) < $signed(zext_ln37_reg_413)) ? 1'b1 : 1'b0);

assign index_filter_fu_276_p2 = ($signed(index_filter_0_reg_150) + $signed(sext_ln37_reg_418));

assign index_output_value_fu_230_p2 = (column_index_after_s_reg_113 + 7'd1);

assign k_x_fu_270_p2 = (k_x_0_reg_161 + 2'd1);

assign k_y_2_fu_362_p2 = (32'd1 + k_y_0_reg_193);

assign prev_output_channel_V_address0 = sext_ln1116_fu_346_p1;

assign select_ln29_fu_212_p3 = ((icmp_ln29_fu_206_p2[0:0] === 1'b1) ? indvars_iv_reg_125 : column_index_after_s_reg_113);

assign sext_ln1116_fu_346_p1 = $signed(add_ln1116_3_fu_341_p2);

assign sext_ln29_fu_246_p1 = phi_ln29_reg_101;

assign sext_ln34_fu_260_p1 = index_filter_0_reg_150;

assign sext_ln37_fu_256_p1 = $signed(add_ln37_1_fu_250_p2);

assign sext_ln40_fu_351_p1 = index_filter_1_reg_184;

assign tmp_117_fu_281_p3 = {{k_x_0_reg_161}, {6'd0}};

assign tmp_118_fu_293_p3 = {{k_x_0_reg_161}, {2'd0}};

assign trunc_ln1116_fu_337_p1 = k_y_0_reg_193[13:0];

assign zext_ln1116_6_fu_301_p1 = tmp_118_fu_293_p3;

assign zext_ln1116_7_fu_311_p1 = add_ln1116_fu_305_p2;

assign zext_ln1116_fu_289_p1 = tmp_117_fu_281_p3;

assign zext_ln29_2_fu_220_p1 = select_ln29_fu_212_p3;

assign zext_ln29_fu_202_p1 = column_index_after_s_reg_113;

assign zext_ln37_fu_242_p1 = add_ln37_fu_236_p2;

assign zext_ln44_fu_315_p1 = column_index_after_s_reg_113;

always @ (posedge ap_clk) begin
    zext_ln29_reg_400[31:7] <= 25'b0000000000000000000000000;
    zext_ln37_reg_413[31:7] <= 25'b0000000000000000000000000;
    zext_ln1116_7_reg_441[1:0] <= 2'b00;
    zext_ln1116_7_reg_441[13:9] <= 5'b00000;
end

endmodule //CORRELATE_1
