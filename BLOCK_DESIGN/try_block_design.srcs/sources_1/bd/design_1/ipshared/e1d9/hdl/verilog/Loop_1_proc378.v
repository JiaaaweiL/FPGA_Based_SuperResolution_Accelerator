// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc378 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        corr8_out_V_valid_V_dout,
        corr8_out_V_valid_V_empty_n,
        corr8_out_V_valid_V_read,
        corr8_out_V_data_V_dout,
        corr8_out_V_data_V_empty_n,
        corr8_out_V_data_V_read,
        corr8_out_V_keep_V_dout,
        corr8_out_V_keep_V_empty_n,
        corr8_out_V_keep_V_read,
        corr8_out_V_user_V_dout,
        corr8_out_V_user_V_empty_n,
        corr8_out_V_user_V_read,
        corr8_out_V_last_V_dout,
        corr8_out_V_last_V_empty_n,
        corr8_out_V_last_V_read,
        corr8_out_V_id_V_dout,
        corr8_out_V_id_V_empty_n,
        corr8_out_V_id_V_read,
        corr8_out_V_dest_V_dout,
        corr8_out_V_dest_V_empty_n,
        corr8_out_V_dest_V_read,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TREADY,
        stream_out_TKEEP,
        stream_out_TSTRB,
        stream_out_TUSER,
        stream_out_TLAST,
        stream_out_TID,
        stream_out_TDEST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state14 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] corr8_out_V_valid_V_dout;
input   corr8_out_V_valid_V_empty_n;
output   corr8_out_V_valid_V_read;
input  [11:0] corr8_out_V_data_V_dout;
input   corr8_out_V_data_V_empty_n;
output   corr8_out_V_data_V_read;
input  [3:0] corr8_out_V_keep_V_dout;
input   corr8_out_V_keep_V_empty_n;
output   corr8_out_V_keep_V_read;
input  [0:0] corr8_out_V_user_V_dout;
input   corr8_out_V_user_V_empty_n;
output   corr8_out_V_user_V_read;
input  [0:0] corr8_out_V_last_V_dout;
input   corr8_out_V_last_V_empty_n;
output   corr8_out_V_last_V_read;
input  [0:0] corr8_out_V_id_V_dout;
input   corr8_out_V_id_V_empty_n;
output   corr8_out_V_id_V_read;
input  [0:0] corr8_out_V_dest_V_dout;
input   corr8_out_V_dest_V_empty_n;
output   corr8_out_V_dest_V_read;
output  [31:0] stream_out_TDATA;
output   stream_out_TVALID;
input   stream_out_TREADY;
output  [3:0] stream_out_TKEEP;
output  [3:0] stream_out_TSTRB;
output  [0:0] stream_out_TUSER;
output  [0:0] stream_out_TLAST;
output  [0:0] stream_out_TID;
output  [0:0] stream_out_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg corr8_out_V_valid_V_read;
reg corr8_out_V_data_V_read;
reg corr8_out_V_keep_V_read;
reg corr8_out_V_user_V_read;
reg corr8_out_V_last_V_read;
reg corr8_out_V_id_V_read;
reg corr8_out_V_dest_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] stream_out_V_data_V_1_data_out;
reg    stream_out_V_data_V_1_vld_in;
wire    stream_out_V_data_V_1_vld_out;
wire    stream_out_V_data_V_1_ack_in;
wire    stream_out_V_data_V_1_ack_out;
reg   [31:0] stream_out_V_data_V_1_payload_A;
reg   [31:0] stream_out_V_data_V_1_payload_B;
reg    stream_out_V_data_V_1_sel_rd;
reg    stream_out_V_data_V_1_sel_wr;
wire    stream_out_V_data_V_1_sel;
wire    stream_out_V_data_V_1_load_A;
wire    stream_out_V_data_V_1_load_B;
reg   [1:0] stream_out_V_data_V_1_state;
wire    stream_out_V_data_V_1_state_cmp_full;
reg   [3:0] stream_out_V_keep_V_1_data_out;
reg    stream_out_V_keep_V_1_vld_in;
wire    stream_out_V_keep_V_1_vld_out;
wire    stream_out_V_keep_V_1_ack_in;
wire    stream_out_V_keep_V_1_ack_out;
reg   [3:0] stream_out_V_keep_V_1_payload_A;
reg   [3:0] stream_out_V_keep_V_1_payload_B;
reg    stream_out_V_keep_V_1_sel_rd;
reg    stream_out_V_keep_V_1_sel_wr;
wire    stream_out_V_keep_V_1_sel;
wire    stream_out_V_keep_V_1_load_A;
wire    stream_out_V_keep_V_1_load_B;
reg   [1:0] stream_out_V_keep_V_1_state;
wire    stream_out_V_keep_V_1_state_cmp_full;
wire   [3:0] stream_out_V_strb_V_1_data_out;
reg    stream_out_V_strb_V_1_vld_in;
wire    stream_out_V_strb_V_1_vld_out;
wire    stream_out_V_strb_V_1_ack_out;
reg    stream_out_V_strb_V_1_sel_rd;
wire    stream_out_V_strb_V_1_sel;
reg   [1:0] stream_out_V_strb_V_1_state;
reg   [0:0] stream_out_V_user_V_1_data_out;
reg    stream_out_V_user_V_1_vld_in;
wire    stream_out_V_user_V_1_vld_out;
wire    stream_out_V_user_V_1_ack_in;
wire    stream_out_V_user_V_1_ack_out;
reg   [0:0] stream_out_V_user_V_1_payload_A;
reg   [0:0] stream_out_V_user_V_1_payload_B;
reg    stream_out_V_user_V_1_sel_rd;
reg    stream_out_V_user_V_1_sel_wr;
wire    stream_out_V_user_V_1_sel;
wire    stream_out_V_user_V_1_load_A;
wire    stream_out_V_user_V_1_load_B;
reg   [1:0] stream_out_V_user_V_1_state;
wire    stream_out_V_user_V_1_state_cmp_full;
reg   [0:0] stream_out_V_last_V_1_data_out;
reg    stream_out_V_last_V_1_vld_in;
wire    stream_out_V_last_V_1_vld_out;
wire    stream_out_V_last_V_1_ack_in;
wire    stream_out_V_last_V_1_ack_out;
reg   [0:0] stream_out_V_last_V_1_payload_A;
reg   [0:0] stream_out_V_last_V_1_payload_B;
reg    stream_out_V_last_V_1_sel_rd;
reg    stream_out_V_last_V_1_sel_wr;
wire    stream_out_V_last_V_1_sel;
wire    stream_out_V_last_V_1_load_A;
wire    stream_out_V_last_V_1_load_B;
reg   [1:0] stream_out_V_last_V_1_state;
wire    stream_out_V_last_V_1_state_cmp_full;
reg   [0:0] stream_out_V_id_V_1_data_out;
reg    stream_out_V_id_V_1_vld_in;
wire    stream_out_V_id_V_1_vld_out;
wire    stream_out_V_id_V_1_ack_in;
wire    stream_out_V_id_V_1_ack_out;
reg   [0:0] stream_out_V_id_V_1_payload_A;
reg   [0:0] stream_out_V_id_V_1_payload_B;
reg    stream_out_V_id_V_1_sel_rd;
reg    stream_out_V_id_V_1_sel_wr;
wire    stream_out_V_id_V_1_sel;
wire    stream_out_V_id_V_1_load_A;
wire    stream_out_V_id_V_1_load_B;
reg   [1:0] stream_out_V_id_V_1_state;
wire    stream_out_V_id_V_1_state_cmp_full;
reg   [0:0] stream_out_V_dest_V_1_data_out;
reg    stream_out_V_dest_V_1_vld_in;
wire    stream_out_V_dest_V_1_vld_out;
wire    stream_out_V_dest_V_1_ack_in;
wire    stream_out_V_dest_V_1_ack_out;
reg   [0:0] stream_out_V_dest_V_1_payload_A;
reg   [0:0] stream_out_V_dest_V_1_payload_B;
reg    stream_out_V_dest_V_1_sel_rd;
reg    stream_out_V_dest_V_1_sel_wr;
wire    stream_out_V_dest_V_1_sel;
wire    stream_out_V_dest_V_1_load_A;
wire    stream_out_V_dest_V_1_load_B;
reg   [1:0] stream_out_V_dest_V_1_state;
wire    stream_out_V_dest_V_1_state_cmp_full;
reg    corr8_out_V_valid_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1219_reg_896;
reg    corr8_out_V_data_V_blk_n;
reg    corr8_out_V_keep_V_blk_n;
reg    corr8_out_V_user_V_blk_n;
reg    corr8_out_V_last_V_blk_n;
reg    corr8_out_V_id_V_blk_n;
reg    corr8_out_V_dest_V_blk_n;
reg    stream_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter10;
reg   [0:0] icmp_ln1219_reg_896_pp0_iter9_reg;
reg    ap_enable_reg_pp0_iter11;
reg   [0:0] icmp_ln1219_reg_896_pp0_iter10_reg;
reg   [14:0] i_0_reg_290;
wire   [0:0] icmp_ln1219_fu_311_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op29;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
reg    ap_block_state12_io;
wire    ap_block_state13_pp0_stage0_iter11;
reg    ap_block_state13_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1219_reg_896_pp0_iter1_reg;
reg   [0:0] icmp_ln1219_reg_896_pp0_iter2_reg;
reg   [0:0] icmp_ln1219_reg_896_pp0_iter3_reg;
reg   [0:0] icmp_ln1219_reg_896_pp0_iter4_reg;
reg   [0:0] icmp_ln1219_reg_896_pp0_iter5_reg;
reg   [0:0] icmp_ln1219_reg_896_pp0_iter6_reg;
reg   [0:0] icmp_ln1219_reg_896_pp0_iter7_reg;
reg   [0:0] icmp_ln1219_reg_896_pp0_iter8_reg;
wire   [14:0] i_fu_317_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [3:0] tmp_keep_V_reg_905;
reg   [3:0] tmp_keep_V_reg_905_pp0_iter2_reg;
reg   [3:0] tmp_keep_V_reg_905_pp0_iter3_reg;
reg   [3:0] tmp_keep_V_reg_905_pp0_iter4_reg;
reg   [3:0] tmp_keep_V_reg_905_pp0_iter5_reg;
reg   [3:0] tmp_keep_V_reg_905_pp0_iter6_reg;
reg   [3:0] tmp_keep_V_reg_905_pp0_iter7_reg;
reg   [3:0] tmp_keep_V_reg_905_pp0_iter8_reg;
reg   [3:0] tmp_keep_V_reg_905_pp0_iter9_reg;
reg   [0:0] tmp_user_V_reg_910;
reg   [0:0] tmp_user_V_reg_910_pp0_iter2_reg;
reg   [0:0] tmp_user_V_reg_910_pp0_iter3_reg;
reg   [0:0] tmp_user_V_reg_910_pp0_iter4_reg;
reg   [0:0] tmp_user_V_reg_910_pp0_iter5_reg;
reg   [0:0] tmp_user_V_reg_910_pp0_iter6_reg;
reg   [0:0] tmp_user_V_reg_910_pp0_iter7_reg;
reg   [0:0] tmp_user_V_reg_910_pp0_iter8_reg;
reg   [0:0] tmp_user_V_reg_910_pp0_iter9_reg;
reg   [0:0] tmp_last_V_reg_915;
reg   [0:0] tmp_last_V_reg_915_pp0_iter2_reg;
reg   [0:0] tmp_last_V_reg_915_pp0_iter3_reg;
reg   [0:0] tmp_last_V_reg_915_pp0_iter4_reg;
reg   [0:0] tmp_last_V_reg_915_pp0_iter5_reg;
reg   [0:0] tmp_last_V_reg_915_pp0_iter6_reg;
reg   [0:0] tmp_last_V_reg_915_pp0_iter7_reg;
reg   [0:0] tmp_last_V_reg_915_pp0_iter8_reg;
reg   [0:0] tmp_last_V_reg_915_pp0_iter9_reg;
reg   [0:0] tmp_id_V_reg_920;
reg   [0:0] tmp_id_V_reg_920_pp0_iter2_reg;
reg   [0:0] tmp_id_V_reg_920_pp0_iter3_reg;
reg   [0:0] tmp_id_V_reg_920_pp0_iter4_reg;
reg   [0:0] tmp_id_V_reg_920_pp0_iter5_reg;
reg   [0:0] tmp_id_V_reg_920_pp0_iter6_reg;
reg   [0:0] tmp_id_V_reg_920_pp0_iter7_reg;
reg   [0:0] tmp_id_V_reg_920_pp0_iter8_reg;
reg   [0:0] tmp_id_V_reg_920_pp0_iter9_reg;
reg   [0:0] tmp_dest_V_reg_925;
reg   [0:0] tmp_dest_V_reg_925_pp0_iter2_reg;
reg   [0:0] tmp_dest_V_reg_925_pp0_iter3_reg;
reg   [0:0] tmp_dest_V_reg_925_pp0_iter4_reg;
reg   [0:0] tmp_dest_V_reg_925_pp0_iter5_reg;
reg   [0:0] tmp_dest_V_reg_925_pp0_iter6_reg;
reg   [0:0] tmp_dest_V_reg_925_pp0_iter7_reg;
reg   [0:0] tmp_dest_V_reg_925_pp0_iter8_reg;
reg   [0:0] tmp_dest_V_reg_925_pp0_iter9_reg;
wire   [19:0] trunc_ln1118_fu_373_p1;
reg   [19:0] trunc_ln1118_reg_930;
wire   [0:0] icmp_ln935_fu_377_p2;
reg   [0:0] icmp_ln935_reg_936;
reg   [0:0] icmp_ln935_reg_936_pp0_iter2_reg;
reg   [0:0] icmp_ln935_reg_936_pp0_iter3_reg;
reg   [0:0] icmp_ln935_reg_936_pp0_iter4_reg;
reg   [0:0] p_Result_11_reg_941;
reg   [0:0] p_Result_11_reg_941_pp0_iter2_reg;
reg   [0:0] p_Result_11_reg_941_pp0_iter3_reg;
reg   [0:0] p_Result_11_reg_941_pp0_iter4_reg;
wire   [19:0] tmp_V_1_fu_396_p3;
reg   [19:0] tmp_V_1_reg_947;
reg   [19:0] tmp_V_1_reg_947_pp0_iter3_reg;
wire   [43:0] zext_ln938_fu_402_p1;
reg   [43:0] zext_ln938_reg_952;
reg   [43:0] zext_ln938_reg_952_pp0_iter3_reg;
wire   [31:0] l_fu_432_p1;
reg   [31:0] l_reg_959;
wire   [7:0] trunc_ln943_fu_436_p1;
reg   [7:0] trunc_ln943_reg_964;
reg   [7:0] trunc_ln943_reg_964_pp0_iter3_reg;
reg   [7:0] trunc_ln943_reg_964_pp0_iter4_reg;
wire   [31:0] sub_ln944_fu_440_p2;
reg   [31:0] sub_ln944_reg_969;
wire   [31:0] or_ln_fu_537_p3;
reg   [31:0] or_ln_reg_975;
wire   [0:0] icmp_ln954_fu_545_p2;
reg   [0:0] icmp_ln954_reg_980;
reg   [30:0] m_4_reg_985;
reg   [0:0] tmp_72_reg_990;
wire   [31:0] data_util_fu_657_p3;
reg   [31:0] data_util_reg_995;
reg   [31:0] data_util_reg_995_pp0_iter6_reg;
wire   [31:0] data_util_1_fu_705_p3;
reg   [31:0] data_util_1_reg_1002;
reg   [31:0] data_util_1_reg_1002_pp0_iter8_reg;
reg   [0:0] p_Result_14_reg_1008;
wire   [22:0] tmp_V_3_fu_779_p1;
reg   [22:0] tmp_V_3_reg_1013;
wire   [8:0] add_ln339_fu_787_p2;
reg   [8:0] add_ln339_reg_1018;
reg   [0:0] isNeg_reg_1023;
wire   [7:0] sub_ln1311_fu_801_p2;
reg   [7:0] sub_ln1311_reg_1029;
wire   [31:0] p_Val2_41_fu_888_p3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_block_pp0_stage0_01001;
wire  signed [11:0] sext_ln1116_fu_347_p0;
wire  signed [11:0] sext_ln1116_1_fu_351_p0;
wire  signed [11:0] shl_ln_fu_355_p1;
wire  signed [19:0] shl_ln_fu_355_p3;
wire  signed [20:0] sext_ln1118_fu_363_p1;
wire  signed [20:0] sext_ln1116_fu_347_p1;
wire   [20:0] tmp_V_fu_367_p2;
wire  signed [19:0] sext_ln1116_1_fu_351_p1;
wire   [19:0] sub_ln939_fu_391_p2;
reg   [43:0] p_Result_s_fu_406_p4;
wire   [63:0] p_Result_12_fu_416_p3;
reg   [63:0] tmp_s_fu_424_p3;
wire   [31:0] lsb_index_fu_445_p2;
wire   [30:0] tmp_70_fu_451_p4;
wire   [5:0] trunc_ln947_fu_467_p1;
wire   [5:0] sub_ln947_fu_471_p2;
wire   [43:0] zext_ln947_fu_477_p1;
wire   [43:0] lshr_ln947_fu_481_p2;
wire   [43:0] p_Result_3_fu_487_p2;
wire   [0:0] icmp_ln947_fu_461_p2;
wire   [0:0] icmp_ln947_1_fu_492_p2;
wire   [0:0] tmp_71_fu_504_p3;
wire   [0:0] p_Result_4_fu_518_p3;
wire   [0:0] xor_ln949_fu_512_p2;
wire   [0:0] and_ln949_fu_525_p2;
wire   [0:0] a_fu_498_p2;
wire   [0:0] or_ln949_fu_531_p2;
wire   [31:0] zext_ln938_1_fu_551_p1;
wire   [31:0] add_ln954_fu_554_p2;
wire   [31:0] sub_ln954_fu_565_p2;
wire   [43:0] zext_ln954_fu_570_p1;
wire   [43:0] shl_ln954_fu_574_p2;
wire   [31:0] lshr_ln954_fu_559_p2;
wire   [31:0] trunc_ln954_fu_579_p1;
wire   [31:0] m_fu_583_p3;
wire   [31:0] m_1_fu_590_p2;
wire   [7:0] select_ln964_fu_616_p3;
wire   [7:0] sub_ln964_fu_623_p2;
wire   [7:0] add_ln964_fu_628_p2;
wire   [31:0] m_5_fu_613_p1;
wire   [8:0] tmp_33_fu_634_p3;
wire   [31:0] p_Result_13_fu_641_p5;
wire   [31:0] bitcast_ln739_fu_653_p1;
wire   [31:0] bitcast_ln1225_fu_664_p1;
wire   [7:0] tmp_26_fu_667_p4;
wire   [22:0] trunc_ln1225_fu_677_p1;
wire   [0:0] icmp_ln1225_1_fu_687_p2;
wire   [0:0] icmp_ln1225_fu_681_p2;
wire   [0:0] or_ln1225_fu_693_p2;
wire   [0:0] grp_fu_301_p2;
wire   [0:0] and_ln1225_fu_699_p2;
wire   [31:0] bitcast_ln1227_fu_712_p1;
wire   [7:0] tmp_28_fu_715_p4;
wire   [22:0] trunc_ln1227_fu_725_p1;
wire   [0:0] icmp_ln1227_1_fu_735_p2;
wire   [0:0] icmp_ln1227_fu_729_p2;
wire   [0:0] or_ln1227_fu_741_p2;
wire   [0:0] grp_fu_306_p2;
wire   [0:0] and_ln1227_fu_747_p2;
wire   [31:0] p_Val2_39_fu_753_p3;
wire   [7:0] tmp_V_2_fu_769_p4;
wire   [8:0] zext_ln339_fu_783_p1;
wire   [24:0] mantissa_V_fu_807_p4;
wire  signed [8:0] sext_ln1311_fu_820_p1;
wire  signed [8:0] ush_fu_823_p3;
wire  signed [31:0] sext_ln1311_1_fu_829_p1;
wire  signed [24:0] sext_ln1311_2_fu_833_p1;
wire   [78:0] zext_ln682_fu_816_p1;
wire   [78:0] zext_ln1287_fu_837_p1;
wire   [24:0] r_V_fu_841_p2;
wire   [0:0] tmp_75_fu_853_p3;
wire   [78:0] r_V_2_fu_847_p2;
wire   [31:0] zext_ln662_fu_861_p1;
wire   [31:0] tmp_113_fu_865_p4;
wire   [31:0] p_Val2_s_fu_875_p3;
wire   [31:0] result_V_1_fu_882_p2;
reg    grp_fu_301_ce;
reg    ap_block_pp0_stage0_00001;
reg    grp_fu_306_ce;
wire    ap_CS_fsm_state14;
reg    ap_block_state14;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 stream_out_V_data_V_1_sel_rd = 1'b0;
#0 stream_out_V_data_V_1_sel_wr = 1'b0;
#0 stream_out_V_data_V_1_state = 2'd0;
#0 stream_out_V_keep_V_1_sel_rd = 1'b0;
#0 stream_out_V_keep_V_1_sel_wr = 1'b0;
#0 stream_out_V_keep_V_1_state = 2'd0;
#0 stream_out_V_strb_V_1_sel_rd = 1'b0;
#0 stream_out_V_strb_V_1_state = 2'd0;
#0 stream_out_V_user_V_1_sel_rd = 1'b0;
#0 stream_out_V_user_V_1_sel_wr = 1'b0;
#0 stream_out_V_user_V_1_state = 2'd0;
#0 stream_out_V_last_V_1_sel_rd = 1'b0;
#0 stream_out_V_last_V_1_sel_wr = 1'b0;
#0 stream_out_V_last_V_1_state = 2'd0;
#0 stream_out_V_id_V_1_sel_rd = 1'b0;
#0 stream_out_V_id_V_1_sel_wr = 1'b0;
#0 stream_out_V_id_V_1_state = 2'd0;
#0 stream_out_V_dest_V_1_sel_rd = 1'b0;
#0 stream_out_V_dest_V_1_sel_wr = 1'b0;
#0 stream_out_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
end

FSRCNN_fcmp_32ns_b6t #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
FSRCNN_fcmp_32ns_b6t_U183(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_util_reg_995),
    .din1(32'd1132396544),
    .ce(grp_fu_301_ce),
    .opcode(5'd2),
    .dout(grp_fu_301_p2)
);

FSRCNN_fcmp_32ns_b6t #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
FSRCNN_fcmp_32ns_b6t_U184(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_util_1_reg_1002),
    .din1(32'd0),
    .ce(grp_fu_306_ce),
    .opcode(5'd4),
    .dout(grp_fu_306_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state14))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_out == 1'b1) & (stream_out_V_data_V_1_vld_out == 1'b1))) begin
            stream_out_V_data_V_1_sel_rd <= ~stream_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_in == 1'b1) & (stream_out_V_data_V_1_vld_in == 1'b1))) begin
            stream_out_V_data_V_1_sel_wr <= ~stream_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_data_V_1_state == 2'd2) & (stream_out_V_data_V_1_vld_in == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd2;
        end else if ((((stream_out_V_data_V_1_state == 2'd1) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)) & (stream_out_V_data_V_1_state == 2'd3)) | ((stream_out_V_data_V_1_state == 2'd1) & (stream_out_V_data_V_1_ack_out == 1'b1)) | ((stream_out_V_data_V_1_state == 2'd2) & (stream_out_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd3;
        end else begin
            stream_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_dest_V_1_ack_out == 1'b1) & (stream_out_V_dest_V_1_vld_out == 1'b1))) begin
            stream_out_V_dest_V_1_sel_rd <= ~stream_out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_dest_V_1_ack_in == 1'b1) & (stream_out_V_dest_V_1_vld_in == 1'b1))) begin
            stream_out_V_dest_V_1_sel_wr <= ~stream_out_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_dest_V_1_state == 2'd2) & (stream_out_V_dest_V_1_vld_in == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_ack_out == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd2;
        end else if ((((stream_out_V_dest_V_1_state == 2'd1) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0) & (stream_out_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_dest_V_1_vld_in == 1'b1)) & (stream_out_V_dest_V_1_state == 2'd3)) | ((stream_out_V_dest_V_1_state == 2'd1) & (stream_out_V_dest_V_1_ack_out == 1'b1)) | ((stream_out_V_dest_V_1_state == 2'd2) & (stream_out_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd3;
        end else begin
            stream_out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_id_V_1_ack_out == 1'b1) & (stream_out_V_id_V_1_vld_out == 1'b1))) begin
            stream_out_V_id_V_1_sel_rd <= ~stream_out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_id_V_1_ack_in == 1'b1) & (stream_out_V_id_V_1_vld_in == 1'b1))) begin
            stream_out_V_id_V_1_sel_wr <= ~stream_out_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_id_V_1_state == 2'd2) & (stream_out_V_id_V_1_vld_in == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_V_id_V_1_vld_in == 1'b0) & (stream_out_V_id_V_1_ack_out == 1'b1)))) begin
            stream_out_V_id_V_1_state <= 2'd2;
        end else if ((((stream_out_V_id_V_1_state == 2'd1) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0) & (stream_out_V_id_V_1_vld_in == 1'b1)))) begin
            stream_out_V_id_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_id_V_1_vld_in == 1'b0) & (stream_out_V_id_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_id_V_1_vld_in == 1'b1)) & (stream_out_V_id_V_1_state == 2'd3)) | ((stream_out_V_id_V_1_state == 2'd1) & (stream_out_V_id_V_1_ack_out == 1'b1)) | ((stream_out_V_id_V_1_state == 2'd2) & (stream_out_V_id_V_1_vld_in == 1'b1)))) begin
            stream_out_V_id_V_1_state <= 2'd3;
        end else begin
            stream_out_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_keep_V_1_ack_out == 1'b1) & (stream_out_V_keep_V_1_vld_out == 1'b1))) begin
            stream_out_V_keep_V_1_sel_rd <= ~stream_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_keep_V_1_ack_in == 1'b1) & (stream_out_V_keep_V_1_vld_in == 1'b1))) begin
            stream_out_V_keep_V_1_sel_wr <= ~stream_out_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_keep_V_1_state == 2'd2) & (stream_out_V_keep_V_1_vld_in == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_ack_out == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd2;
        end else if ((((stream_out_V_keep_V_1_state == 2'd1) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0) & (stream_out_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_keep_V_1_vld_in == 1'b1)) & (stream_out_V_keep_V_1_state == 2'd3)) | ((stream_out_V_keep_V_1_state == 2'd1) & (stream_out_V_keep_V_1_ack_out == 1'b1)) | ((stream_out_V_keep_V_1_state == 2'd2) & (stream_out_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd3;
        end else begin
            stream_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_last_V_1_ack_out == 1'b1) & (stream_out_V_last_V_1_vld_out == 1'b1))) begin
            stream_out_V_last_V_1_sel_rd <= ~stream_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_last_V_1_ack_in == 1'b1) & (stream_out_V_last_V_1_vld_in == 1'b1))) begin
            stream_out_V_last_V_1_sel_wr <= ~stream_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_last_V_1_state == 2'd2) & (stream_out_V_last_V_1_vld_in == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_ack_out == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd2;
        end else if ((((stream_out_V_last_V_1_state == 2'd1) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0) & (stream_out_V_last_V_1_vld_in == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_last_V_1_vld_in == 1'b1)) & (stream_out_V_last_V_1_state == 2'd3)) | ((stream_out_V_last_V_1_state == 2'd1) & (stream_out_V_last_V_1_ack_out == 1'b1)) | ((stream_out_V_last_V_1_state == 2'd2) & (stream_out_V_last_V_1_vld_in == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd3;
        end else begin
            stream_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_strb_V_1_ack_out == 1'b1) & (stream_out_V_strb_V_1_vld_out == 1'b1))) begin
            stream_out_V_strb_V_1_sel_rd <= ~stream_out_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_strb_V_1_state == 2'd2) & (stream_out_V_strb_V_1_vld_in == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_V_strb_V_1_vld_in == 1'b0) & (stream_out_V_strb_V_1_ack_out == 1'b1)))) begin
            stream_out_V_strb_V_1_state <= 2'd2;
        end else if ((((stream_out_V_strb_V_1_state == 2'd1) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0) & (stream_out_V_strb_V_1_vld_in == 1'b1)))) begin
            stream_out_V_strb_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_strb_V_1_vld_in == 1'b0) & (stream_out_V_strb_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_strb_V_1_vld_in == 1'b1)) & (stream_out_V_strb_V_1_state == 2'd3)) | ((stream_out_V_strb_V_1_state == 2'd1) & (stream_out_V_strb_V_1_ack_out == 1'b1)) | ((stream_out_V_strb_V_1_state == 2'd2) & (stream_out_V_strb_V_1_vld_in == 1'b1)))) begin
            stream_out_V_strb_V_1_state <= 2'd3;
        end else begin
            stream_out_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_user_V_1_ack_out == 1'b1) & (stream_out_V_user_V_1_vld_out == 1'b1))) begin
            stream_out_V_user_V_1_sel_rd <= ~stream_out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_user_V_1_ack_in == 1'b1) & (stream_out_V_user_V_1_vld_in == 1'b1))) begin
            stream_out_V_user_V_1_sel_wr <= ~stream_out_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        stream_out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_user_V_1_state == 2'd2) & (stream_out_V_user_V_1_vld_in == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_V_user_V_1_vld_in == 1'b0) & (stream_out_V_user_V_1_ack_out == 1'b1)))) begin
            stream_out_V_user_V_1_state <= 2'd2;
        end else if ((((stream_out_V_user_V_1_state == 2'd1) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0) & (stream_out_V_user_V_1_vld_in == 1'b1)))) begin
            stream_out_V_user_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_user_V_1_vld_in == 1'b0) & (stream_out_V_user_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_user_V_1_vld_in == 1'b1)) & (stream_out_V_user_V_1_state == 2'd3)) | ((stream_out_V_user_V_1_state == 2'd1) & (stream_out_V_user_V_1_ack_out == 1'b1)) | ((stream_out_V_user_V_1_state == 2'd2) & (stream_out_V_user_V_1_vld_in == 1'b1)))) begin
            stream_out_V_user_V_1_state <= 2'd3;
        end else begin
            stream_out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1219_fu_311_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_290 <= i_fu_317_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_290 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1219_reg_896_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln339_reg_1018 <= add_ln339_fu_787_p2;
        isNeg_reg_1023 <= add_ln339_fu_787_p2[32'd8];
        p_Result_14_reg_1008 <= p_Val2_39_fu_753_p3[32'd31];
        sub_ln1311_reg_1029 <= sub_ln1311_fu_801_p2;
        tmp_V_3_reg_1013 <= tmp_V_3_fu_779_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1219_reg_896_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_util_1_reg_1002 <= data_util_1_fu_705_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        data_util_1_reg_1002_pp0_iter8_reg <= data_util_1_reg_1002;
        data_util_reg_995_pp0_iter6_reg <= data_util_reg_995;
        icmp_ln1219_reg_896_pp0_iter10_reg <= icmp_ln1219_reg_896_pp0_iter9_reg;
        icmp_ln1219_reg_896_pp0_iter2_reg <= icmp_ln1219_reg_896_pp0_iter1_reg;
        icmp_ln1219_reg_896_pp0_iter3_reg <= icmp_ln1219_reg_896_pp0_iter2_reg;
        icmp_ln1219_reg_896_pp0_iter4_reg <= icmp_ln1219_reg_896_pp0_iter3_reg;
        icmp_ln1219_reg_896_pp0_iter5_reg <= icmp_ln1219_reg_896_pp0_iter4_reg;
        icmp_ln1219_reg_896_pp0_iter6_reg <= icmp_ln1219_reg_896_pp0_iter5_reg;
        icmp_ln1219_reg_896_pp0_iter7_reg <= icmp_ln1219_reg_896_pp0_iter6_reg;
        icmp_ln1219_reg_896_pp0_iter8_reg <= icmp_ln1219_reg_896_pp0_iter7_reg;
        icmp_ln1219_reg_896_pp0_iter9_reg <= icmp_ln1219_reg_896_pp0_iter8_reg;
        icmp_ln935_reg_936_pp0_iter2_reg <= icmp_ln935_reg_936;
        icmp_ln935_reg_936_pp0_iter3_reg <= icmp_ln935_reg_936_pp0_iter2_reg;
        icmp_ln935_reg_936_pp0_iter4_reg <= icmp_ln935_reg_936_pp0_iter3_reg;
        p_Result_11_reg_941_pp0_iter2_reg <= p_Result_11_reg_941;
        p_Result_11_reg_941_pp0_iter3_reg <= p_Result_11_reg_941_pp0_iter2_reg;
        p_Result_11_reg_941_pp0_iter4_reg <= p_Result_11_reg_941_pp0_iter3_reg;
        tmp_V_1_reg_947_pp0_iter3_reg <= tmp_V_1_reg_947;
        tmp_dest_V_reg_925_pp0_iter2_reg <= tmp_dest_V_reg_925;
        tmp_dest_V_reg_925_pp0_iter3_reg <= tmp_dest_V_reg_925_pp0_iter2_reg;
        tmp_dest_V_reg_925_pp0_iter4_reg <= tmp_dest_V_reg_925_pp0_iter3_reg;
        tmp_dest_V_reg_925_pp0_iter5_reg <= tmp_dest_V_reg_925_pp0_iter4_reg;
        tmp_dest_V_reg_925_pp0_iter6_reg <= tmp_dest_V_reg_925_pp0_iter5_reg;
        tmp_dest_V_reg_925_pp0_iter7_reg <= tmp_dest_V_reg_925_pp0_iter6_reg;
        tmp_dest_V_reg_925_pp0_iter8_reg <= tmp_dest_V_reg_925_pp0_iter7_reg;
        tmp_dest_V_reg_925_pp0_iter9_reg <= tmp_dest_V_reg_925_pp0_iter8_reg;
        tmp_id_V_reg_920_pp0_iter2_reg <= tmp_id_V_reg_920;
        tmp_id_V_reg_920_pp0_iter3_reg <= tmp_id_V_reg_920_pp0_iter2_reg;
        tmp_id_V_reg_920_pp0_iter4_reg <= tmp_id_V_reg_920_pp0_iter3_reg;
        tmp_id_V_reg_920_pp0_iter5_reg <= tmp_id_V_reg_920_pp0_iter4_reg;
        tmp_id_V_reg_920_pp0_iter6_reg <= tmp_id_V_reg_920_pp0_iter5_reg;
        tmp_id_V_reg_920_pp0_iter7_reg <= tmp_id_V_reg_920_pp0_iter6_reg;
        tmp_id_V_reg_920_pp0_iter8_reg <= tmp_id_V_reg_920_pp0_iter7_reg;
        tmp_id_V_reg_920_pp0_iter9_reg <= tmp_id_V_reg_920_pp0_iter8_reg;
        tmp_keep_V_reg_905_pp0_iter2_reg <= tmp_keep_V_reg_905;
        tmp_keep_V_reg_905_pp0_iter3_reg <= tmp_keep_V_reg_905_pp0_iter2_reg;
        tmp_keep_V_reg_905_pp0_iter4_reg <= tmp_keep_V_reg_905_pp0_iter3_reg;
        tmp_keep_V_reg_905_pp0_iter5_reg <= tmp_keep_V_reg_905_pp0_iter4_reg;
        tmp_keep_V_reg_905_pp0_iter6_reg <= tmp_keep_V_reg_905_pp0_iter5_reg;
        tmp_keep_V_reg_905_pp0_iter7_reg <= tmp_keep_V_reg_905_pp0_iter6_reg;
        tmp_keep_V_reg_905_pp0_iter8_reg <= tmp_keep_V_reg_905_pp0_iter7_reg;
        tmp_keep_V_reg_905_pp0_iter9_reg <= tmp_keep_V_reg_905_pp0_iter8_reg;
        tmp_last_V_reg_915_pp0_iter2_reg <= tmp_last_V_reg_915;
        tmp_last_V_reg_915_pp0_iter3_reg <= tmp_last_V_reg_915_pp0_iter2_reg;
        tmp_last_V_reg_915_pp0_iter4_reg <= tmp_last_V_reg_915_pp0_iter3_reg;
        tmp_last_V_reg_915_pp0_iter5_reg <= tmp_last_V_reg_915_pp0_iter4_reg;
        tmp_last_V_reg_915_pp0_iter6_reg <= tmp_last_V_reg_915_pp0_iter5_reg;
        tmp_last_V_reg_915_pp0_iter7_reg <= tmp_last_V_reg_915_pp0_iter6_reg;
        tmp_last_V_reg_915_pp0_iter8_reg <= tmp_last_V_reg_915_pp0_iter7_reg;
        tmp_last_V_reg_915_pp0_iter9_reg <= tmp_last_V_reg_915_pp0_iter8_reg;
        tmp_user_V_reg_910_pp0_iter2_reg <= tmp_user_V_reg_910;
        tmp_user_V_reg_910_pp0_iter3_reg <= tmp_user_V_reg_910_pp0_iter2_reg;
        tmp_user_V_reg_910_pp0_iter4_reg <= tmp_user_V_reg_910_pp0_iter3_reg;
        tmp_user_V_reg_910_pp0_iter5_reg <= tmp_user_V_reg_910_pp0_iter4_reg;
        tmp_user_V_reg_910_pp0_iter6_reg <= tmp_user_V_reg_910_pp0_iter5_reg;
        tmp_user_V_reg_910_pp0_iter7_reg <= tmp_user_V_reg_910_pp0_iter6_reg;
        tmp_user_V_reg_910_pp0_iter8_reg <= tmp_user_V_reg_910_pp0_iter7_reg;
        tmp_user_V_reg_910_pp0_iter9_reg <= tmp_user_V_reg_910_pp0_iter8_reg;
        trunc_ln943_reg_964_pp0_iter3_reg <= trunc_ln943_reg_964;
        trunc_ln943_reg_964_pp0_iter4_reg <= trunc_ln943_reg_964_pp0_iter3_reg;
        zext_ln938_reg_952_pp0_iter3_reg[19 : 0] <= zext_ln938_reg_952[19 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1219_reg_896_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_util_reg_995 <= data_util_fu_657_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1219_reg_896 <= icmp_ln1219_fu_311_p2;
        icmp_ln1219_reg_896_pp0_iter1_reg <= icmp_ln1219_reg_896;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1219_reg_896 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln935_reg_936 <= icmp_ln935_fu_377_p2;
        p_Result_11_reg_941 <= tmp_V_fu_367_p2[32'd20];
        tmp_dest_V_reg_925 <= corr8_out_V_dest_V_dout;
        tmp_id_V_reg_920 <= corr8_out_V_id_V_dout;
        tmp_keep_V_reg_905 <= corr8_out_V_keep_V_dout;
        tmp_last_V_reg_915 <= corr8_out_V_last_V_dout;
        tmp_user_V_reg_910 <= corr8_out_V_user_V_dout;
        trunc_ln1118_reg_930 <= trunc_ln1118_fu_373_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_936_pp0_iter2_reg == 1'd0) & (icmp_ln1219_reg_896_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln954_reg_980 <= icmp_ln954_fu_545_p2;
        or_ln_reg_975[0] <= or_ln_fu_537_p3[0];
        sub_ln944_reg_969 <= sub_ln944_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_936 == 1'd0) & (icmp_ln1219_reg_896_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        l_reg_959 <= l_fu_432_p1;
        tmp_V_1_reg_947 <= tmp_V_1_fu_396_p3;
        trunc_ln943_reg_964 <= trunc_ln943_fu_436_p1;
        zext_ln938_reg_952[19 : 0] <= zext_ln938_fu_402_p1[19 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln935_reg_936_pp0_iter3_reg == 1'd0) & (icmp_ln1219_reg_896_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_4_reg_985 <= {{m_1_fu_590_p2[31:1]}};
        tmp_72_reg_990 <= m_1_fu_590_p2[32'd25];
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_A == 1'b1)) begin
        stream_out_V_data_V_1_payload_A <= p_Val2_41_fu_888_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_B == 1'b1)) begin
        stream_out_V_data_V_1_payload_B <= p_Val2_41_fu_888_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_dest_V_1_load_A == 1'b1)) begin
        stream_out_V_dest_V_1_payload_A <= tmp_dest_V_reg_925_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_dest_V_1_load_B == 1'b1)) begin
        stream_out_V_dest_V_1_payload_B <= tmp_dest_V_reg_925_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_id_V_1_load_A == 1'b1)) begin
        stream_out_V_id_V_1_payload_A <= tmp_id_V_reg_920_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_id_V_1_load_B == 1'b1)) begin
        stream_out_V_id_V_1_payload_B <= tmp_id_V_reg_920_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_keep_V_1_load_A == 1'b1)) begin
        stream_out_V_keep_V_1_payload_A <= tmp_keep_V_reg_905_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_keep_V_1_load_B == 1'b1)) begin
        stream_out_V_keep_V_1_payload_B <= tmp_keep_V_reg_905_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_V_1_load_A == 1'b1)) begin
        stream_out_V_last_V_1_payload_A <= tmp_last_V_reg_915_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_V_1_load_B == 1'b1)) begin
        stream_out_V_last_V_1_payload_B <= tmp_last_V_reg_915_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_user_V_1_load_A == 1'b1)) begin
        stream_out_V_user_V_1_payload_A <= tmp_user_V_reg_910_pp0_iter9_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_user_V_1_load_B == 1'b1)) begin
        stream_out_V_user_V_1_payload_B <= tmp_user_V_reg_910_pp0_iter9_reg;
    end
end

always @ (*) begin
    if ((icmp_ln1219_fu_311_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        corr8_out_V_data_V_blk_n = corr8_out_V_data_V_empty_n;
    end else begin
        corr8_out_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        corr8_out_V_data_V_read = 1'b1;
    end else begin
        corr8_out_V_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        corr8_out_V_dest_V_blk_n = corr8_out_V_dest_V_empty_n;
    end else begin
        corr8_out_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        corr8_out_V_dest_V_read = 1'b1;
    end else begin
        corr8_out_V_dest_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        corr8_out_V_id_V_blk_n = corr8_out_V_id_V_empty_n;
    end else begin
        corr8_out_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        corr8_out_V_id_V_read = 1'b1;
    end else begin
        corr8_out_V_id_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        corr8_out_V_keep_V_blk_n = corr8_out_V_keep_V_empty_n;
    end else begin
        corr8_out_V_keep_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        corr8_out_V_keep_V_read = 1'b1;
    end else begin
        corr8_out_V_keep_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        corr8_out_V_last_V_blk_n = corr8_out_V_last_V_empty_n;
    end else begin
        corr8_out_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        corr8_out_V_last_V_read = 1'b1;
    end else begin
        corr8_out_V_last_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        corr8_out_V_user_V_blk_n = corr8_out_V_user_V_empty_n;
    end else begin
        corr8_out_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        corr8_out_V_user_V_read = 1'b1;
    end else begin
        corr8_out_V_user_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        corr8_out_V_valid_V_blk_n = corr8_out_V_valid_V_empty_n;
    end else begin
        corr8_out_V_valid_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        corr8_out_V_valid_V_read = 1'b1;
    end else begin
        corr8_out_V_valid_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_301_ce = 1'b1;
    end else begin
        grp_fu_301_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_306_ce = 1'b1;
    end else begin
        grp_fu_306_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1219_reg_896_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((icmp_ln1219_reg_896_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter10 == 1'b1)))) begin
        stream_out_TDATA_blk_n = stream_out_V_data_V_1_state[1'd1];
    end else begin
        stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((stream_out_V_data_V_1_sel == 1'b1)) begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_B;
    end else begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        stream_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_dest_V_1_sel == 1'b1)) begin
        stream_out_V_dest_V_1_data_out = stream_out_V_dest_V_1_payload_B;
    end else begin
        stream_out_V_dest_V_1_data_out = stream_out_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        stream_out_V_dest_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_id_V_1_sel == 1'b1)) begin
        stream_out_V_id_V_1_data_out = stream_out_V_id_V_1_payload_B;
    end else begin
        stream_out_V_id_V_1_data_out = stream_out_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        stream_out_V_id_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_keep_V_1_sel == 1'b1)) begin
        stream_out_V_keep_V_1_data_out = stream_out_V_keep_V_1_payload_B;
    end else begin
        stream_out_V_keep_V_1_data_out = stream_out_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        stream_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_last_V_1_sel == 1'b1)) begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_B;
    end else begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        stream_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        stream_out_V_strb_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_user_V_1_sel == 1'b1)) begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_B;
    end else begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_896_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        stream_out_V_user_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln1219_fu_311_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln1219_fu_311_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            if ((~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_498_p2 = (icmp_ln947_fu_461_p2 & icmp_ln947_1_fu_492_p2);

assign add_ln339_fu_787_p2 = ($signed(9'd385) + $signed(zext_ln339_fu_783_p1));

assign add_ln954_fu_554_p2 = ($signed(32'd4294967271) + $signed(sub_ln944_reg_969));

assign add_ln964_fu_628_p2 = (select_ln964_fu_616_p3 + sub_ln964_fu_623_p2);

assign and_ln1225_fu_699_p2 = (or_ln1225_fu_693_p2 & grp_fu_301_p2);

assign and_ln1227_fu_747_p2 = (or_ln1227_fu_741_p2 & grp_fu_306_p2);

assign and_ln949_fu_525_p2 = (xor_ln949_fu_512_p2 & p_Result_4_fu_518_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = ((icmp_ln1219_reg_896 == 1'd0) & (io_acc_block_signal_op29 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln1219_reg_896 == 1'd0) & (io_acc_block_signal_op29 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter10 == 1'b1)) | ((icmp_ln1219_reg_896 == 1'd0) & (io_acc_block_signal_op29 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter10 == 1'b1)) | ((icmp_ln1219_reg_896 == 1'd0) & (io_acc_block_signal_op29 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((icmp_ln1219_reg_896_pp0_iter9_reg == 1'd0) & (stream_out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((icmp_ln1219_reg_896_pp0_iter10_reg == 1'd0) & (stream_out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14 = ((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln1219_reg_896 == 1'd0) & (io_acc_block_signal_op29 == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln1225_fu_664_p1 = data_util_reg_995_pp0_iter6_reg;

assign bitcast_ln1227_fu_712_p1 = data_util_1_reg_1002_pp0_iter8_reg;

assign bitcast_ln739_fu_653_p1 = p_Result_13_fu_641_p5;

assign data_util_1_fu_705_p3 = ((and_ln1225_fu_699_p2[0:0] === 1'b1) ? 32'd1132396544 : data_util_reg_995_pp0_iter6_reg);

assign data_util_fu_657_p3 = ((icmp_ln935_reg_936_pp0_iter4_reg[0:0] === 1'b1) ? 32'd0 : bitcast_ln739_fu_653_p1);

assign i_fu_317_p2 = (i_0_reg_290 + 15'd1);

assign icmp_ln1219_fu_311_p2 = ((i_0_reg_290 == 15'd16384) ? 1'b1 : 1'b0);

assign icmp_ln1225_1_fu_687_p2 = ((trunc_ln1225_fu_677_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln1225_fu_681_p2 = ((tmp_26_fu_667_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln1227_1_fu_735_p2 = ((trunc_ln1227_fu_725_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln1227_fu_729_p2 = ((tmp_28_fu_715_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln935_fu_377_p2 = ((shl_ln_fu_355_p3 == sext_ln1116_1_fu_351_p1) ? 1'b1 : 1'b0);

assign icmp_ln947_1_fu_492_p2 = ((p_Result_3_fu_487_p2 != 44'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_fu_461_p2 = (($signed(tmp_70_fu_451_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln954_fu_545_p2 = (($signed(lsb_index_fu_445_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op29 = (corr8_out_V_valid_V_empty_n & corr8_out_V_user_V_empty_n & corr8_out_V_last_V_empty_n & corr8_out_V_keep_V_empty_n & corr8_out_V_id_V_empty_n & corr8_out_V_dest_V_empty_n & corr8_out_V_data_V_empty_n);

assign l_fu_432_p1 = tmp_s_fu_424_p3[31:0];

assign lsb_index_fu_445_p2 = ($signed(32'd4294967272) + $signed(sub_ln944_fu_440_p2));

assign lshr_ln947_fu_481_p2 = 44'd17592186044415 >> zext_ln947_fu_477_p1;

assign lshr_ln954_fu_559_p2 = zext_ln938_1_fu_551_p1 >> add_ln954_fu_554_p2;

assign m_1_fu_590_p2 = (m_fu_583_p3 + or_ln_reg_975);

assign m_5_fu_613_p1 = m_4_reg_985;

assign m_fu_583_p3 = ((icmp_ln954_reg_980[0:0] === 1'b1) ? lshr_ln954_fu_559_p2 : trunc_ln954_fu_579_p1);

assign mantissa_V_fu_807_p4 = {{{{1'd1}, {tmp_V_3_reg_1013}}}, {1'd0}};

assign or_ln1225_fu_693_p2 = (icmp_ln1225_fu_681_p2 | icmp_ln1225_1_fu_687_p2);

assign or_ln1227_fu_741_p2 = (icmp_ln1227_fu_729_p2 | icmp_ln1227_1_fu_735_p2);

assign or_ln949_fu_531_p2 = (and_ln949_fu_525_p2 | a_fu_498_p2);

assign or_ln_fu_537_p3 = {{31'd0}, {or_ln949_fu_531_p2}};

assign p_Result_12_fu_416_p3 = {{20'd1048575}, {p_Result_s_fu_406_p4}};

assign p_Result_13_fu_641_p5 = {{tmp_33_fu_634_p3}, {m_5_fu_613_p1[22:0]}};

assign p_Result_3_fu_487_p2 = (zext_ln938_reg_952 & lshr_ln947_fu_481_p2);

assign p_Result_4_fu_518_p3 = zext_ln938_reg_952[lsb_index_fu_445_p2];

integer ap_tvar_int_0;

always @ (zext_ln938_fu_402_p1) begin
    for (ap_tvar_int_0 = 44 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 43 - 0) begin
            p_Result_s_fu_406_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_406_p4[ap_tvar_int_0] = zext_ln938_fu_402_p1[43 - ap_tvar_int_0];
        end
    end
end

assign p_Val2_39_fu_753_p3 = ((and_ln1227_fu_747_p2[0:0] === 1'b1) ? 32'd0 : bitcast_ln1227_fu_712_p1);

assign p_Val2_41_fu_888_p3 = ((p_Result_14_reg_1008[0:0] === 1'b1) ? result_V_1_fu_882_p2 : p_Val2_s_fu_875_p3);

assign p_Val2_s_fu_875_p3 = ((isNeg_reg_1023[0:0] === 1'b1) ? zext_ln662_fu_861_p1 : tmp_113_fu_865_p4);

assign r_V_2_fu_847_p2 = zext_ln682_fu_816_p1 << zext_ln1287_fu_837_p1;

assign r_V_fu_841_p2 = mantissa_V_fu_807_p4 >> sext_ln1311_2_fu_833_p1;

assign result_V_1_fu_882_p2 = (32'd0 - p_Val2_s_fu_875_p3);

assign select_ln964_fu_616_p3 = ((tmp_72_reg_990[0:0] === 1'b1) ? 8'd127 : 8'd126);

assign sext_ln1116_1_fu_351_p0 = corr8_out_V_data_V_dout;

assign sext_ln1116_1_fu_351_p1 = sext_ln1116_1_fu_351_p0;

assign sext_ln1116_fu_347_p0 = corr8_out_V_data_V_dout;

assign sext_ln1116_fu_347_p1 = sext_ln1116_fu_347_p0;

assign sext_ln1118_fu_363_p1 = shl_ln_fu_355_p3;

assign sext_ln1311_1_fu_829_p1 = ush_fu_823_p3;

assign sext_ln1311_2_fu_833_p1 = ush_fu_823_p3;

assign sext_ln1311_fu_820_p1 = $signed(sub_ln1311_reg_1029);

assign shl_ln954_fu_574_p2 = zext_ln938_reg_952_pp0_iter3_reg << zext_ln954_fu_570_p1;

assign shl_ln_fu_355_p1 = corr8_out_V_data_V_dout;

assign shl_ln_fu_355_p3 = {{shl_ln_fu_355_p1}, {8'd0}};

assign stream_out_TDATA = stream_out_V_data_V_1_data_out;

assign stream_out_TDEST = stream_out_V_dest_V_1_data_out;

assign stream_out_TID = stream_out_V_id_V_1_data_out;

assign stream_out_TKEEP = stream_out_V_keep_V_1_data_out;

assign stream_out_TLAST = stream_out_V_last_V_1_data_out;

assign stream_out_TSTRB = stream_out_V_strb_V_1_data_out;

assign stream_out_TUSER = stream_out_V_user_V_1_data_out;

assign stream_out_TVALID = stream_out_V_dest_V_1_state[1'd0];

assign stream_out_V_data_V_1_ack_in = stream_out_V_data_V_1_state[1'd1];

assign stream_out_V_data_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_data_V_1_load_A = (stream_out_V_data_V_1_state_cmp_full & ~stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_load_B = (stream_out_V_data_V_1_state_cmp_full & stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_sel = stream_out_V_data_V_1_sel_rd;

assign stream_out_V_data_V_1_state_cmp_full = ((stream_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_data_V_1_vld_out = stream_out_V_data_V_1_state[1'd0];

assign stream_out_V_dest_V_1_ack_in = stream_out_V_dest_V_1_state[1'd1];

assign stream_out_V_dest_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_dest_V_1_load_A = (stream_out_V_dest_V_1_state_cmp_full & ~stream_out_V_dest_V_1_sel_wr);

assign stream_out_V_dest_V_1_load_B = (stream_out_V_dest_V_1_state_cmp_full & stream_out_V_dest_V_1_sel_wr);

assign stream_out_V_dest_V_1_sel = stream_out_V_dest_V_1_sel_rd;

assign stream_out_V_dest_V_1_state_cmp_full = ((stream_out_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_dest_V_1_vld_out = stream_out_V_dest_V_1_state[1'd0];

assign stream_out_V_id_V_1_ack_in = stream_out_V_id_V_1_state[1'd1];

assign stream_out_V_id_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_id_V_1_load_A = (stream_out_V_id_V_1_state_cmp_full & ~stream_out_V_id_V_1_sel_wr);

assign stream_out_V_id_V_1_load_B = (stream_out_V_id_V_1_state_cmp_full & stream_out_V_id_V_1_sel_wr);

assign stream_out_V_id_V_1_sel = stream_out_V_id_V_1_sel_rd;

assign stream_out_V_id_V_1_state_cmp_full = ((stream_out_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_id_V_1_vld_out = stream_out_V_id_V_1_state[1'd0];

assign stream_out_V_keep_V_1_ack_in = stream_out_V_keep_V_1_state[1'd1];

assign stream_out_V_keep_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_keep_V_1_load_A = (stream_out_V_keep_V_1_state_cmp_full & ~stream_out_V_keep_V_1_sel_wr);

assign stream_out_V_keep_V_1_load_B = (stream_out_V_keep_V_1_state_cmp_full & stream_out_V_keep_V_1_sel_wr);

assign stream_out_V_keep_V_1_sel = stream_out_V_keep_V_1_sel_rd;

assign stream_out_V_keep_V_1_state_cmp_full = ((stream_out_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_keep_V_1_vld_out = stream_out_V_keep_V_1_state[1'd0];

assign stream_out_V_last_V_1_ack_in = stream_out_V_last_V_1_state[1'd1];

assign stream_out_V_last_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_last_V_1_load_A = (stream_out_V_last_V_1_state_cmp_full & ~stream_out_V_last_V_1_sel_wr);

assign stream_out_V_last_V_1_load_B = (stream_out_V_last_V_1_state_cmp_full & stream_out_V_last_V_1_sel_wr);

assign stream_out_V_last_V_1_sel = stream_out_V_last_V_1_sel_rd;

assign stream_out_V_last_V_1_state_cmp_full = ((stream_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_last_V_1_vld_out = stream_out_V_last_V_1_state[1'd0];

assign stream_out_V_strb_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_strb_V_1_data_out = 4'd0;

assign stream_out_V_strb_V_1_sel = stream_out_V_strb_V_1_sel_rd;

assign stream_out_V_strb_V_1_vld_out = stream_out_V_strb_V_1_state[1'd0];

assign stream_out_V_user_V_1_ack_in = stream_out_V_user_V_1_state[1'd1];

assign stream_out_V_user_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_user_V_1_load_A = (stream_out_V_user_V_1_state_cmp_full & ~stream_out_V_user_V_1_sel_wr);

assign stream_out_V_user_V_1_load_B = (stream_out_V_user_V_1_state_cmp_full & stream_out_V_user_V_1_sel_wr);

assign stream_out_V_user_V_1_sel = stream_out_V_user_V_1_sel_rd;

assign stream_out_V_user_V_1_state_cmp_full = ((stream_out_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_user_V_1_vld_out = stream_out_V_user_V_1_state[1'd0];

assign sub_ln1311_fu_801_p2 = (8'd127 - tmp_V_2_fu_769_p4);

assign sub_ln939_fu_391_p2 = (20'd0 - trunc_ln1118_reg_930);

assign sub_ln944_fu_440_p2 = (32'd44 - l_reg_959);

assign sub_ln947_fu_471_p2 = (6'd5 - trunc_ln947_fu_467_p1);

assign sub_ln954_fu_565_p2 = (32'd25 - sub_ln944_reg_969);

assign sub_ln964_fu_623_p2 = (8'd40 - trunc_ln943_reg_964_pp0_iter4_reg);

assign tmp_113_fu_865_p4 = {{r_V_2_fu_847_p2[55:24]}};

assign tmp_26_fu_667_p4 = {{bitcast_ln1225_fu_664_p1[30:23]}};

assign tmp_28_fu_715_p4 = {{bitcast_ln1227_fu_712_p1[30:23]}};

assign tmp_33_fu_634_p3 = {{p_Result_11_reg_941_pp0_iter4_reg}, {add_ln964_fu_628_p2}};

assign tmp_70_fu_451_p4 = {{lsb_index_fu_445_p2[31:1]}};

assign tmp_71_fu_504_p3 = lsb_index_fu_445_p2[32'd31];

assign tmp_75_fu_853_p3 = r_V_fu_841_p2[32'd24];

assign tmp_V_1_fu_396_p3 = ((p_Result_11_reg_941[0:0] === 1'b1) ? sub_ln939_fu_391_p2 : trunc_ln1118_reg_930);

assign tmp_V_2_fu_769_p4 = {{p_Val2_39_fu_753_p3[30:23]}};

assign tmp_V_3_fu_779_p1 = p_Val2_39_fu_753_p3[22:0];

assign tmp_V_fu_367_p2 = ($signed(sext_ln1118_fu_363_p1) - $signed(sext_ln1116_fu_347_p1));


always @ (p_Result_12_fu_416_p3) begin
    if (p_Result_12_fu_416_p3[0] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd0;
    end else if (p_Result_12_fu_416_p3[1] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd1;
    end else if (p_Result_12_fu_416_p3[2] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd2;
    end else if (p_Result_12_fu_416_p3[3] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd3;
    end else if (p_Result_12_fu_416_p3[4] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd4;
    end else if (p_Result_12_fu_416_p3[5] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd5;
    end else if (p_Result_12_fu_416_p3[6] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd6;
    end else if (p_Result_12_fu_416_p3[7] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd7;
    end else if (p_Result_12_fu_416_p3[8] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd8;
    end else if (p_Result_12_fu_416_p3[9] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd9;
    end else if (p_Result_12_fu_416_p3[10] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd10;
    end else if (p_Result_12_fu_416_p3[11] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd11;
    end else if (p_Result_12_fu_416_p3[12] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd12;
    end else if (p_Result_12_fu_416_p3[13] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd13;
    end else if (p_Result_12_fu_416_p3[14] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd14;
    end else if (p_Result_12_fu_416_p3[15] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd15;
    end else if (p_Result_12_fu_416_p3[16] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd16;
    end else if (p_Result_12_fu_416_p3[17] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd17;
    end else if (p_Result_12_fu_416_p3[18] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd18;
    end else if (p_Result_12_fu_416_p3[19] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd19;
    end else if (p_Result_12_fu_416_p3[20] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd20;
    end else if (p_Result_12_fu_416_p3[21] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd21;
    end else if (p_Result_12_fu_416_p3[22] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd22;
    end else if (p_Result_12_fu_416_p3[23] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd23;
    end else if (p_Result_12_fu_416_p3[24] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd24;
    end else if (p_Result_12_fu_416_p3[25] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd25;
    end else if (p_Result_12_fu_416_p3[26] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd26;
    end else if (p_Result_12_fu_416_p3[27] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd27;
    end else if (p_Result_12_fu_416_p3[28] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd28;
    end else if (p_Result_12_fu_416_p3[29] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd29;
    end else if (p_Result_12_fu_416_p3[30] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd30;
    end else if (p_Result_12_fu_416_p3[31] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd31;
    end else if (p_Result_12_fu_416_p3[32] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd32;
    end else if (p_Result_12_fu_416_p3[33] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd33;
    end else if (p_Result_12_fu_416_p3[34] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd34;
    end else if (p_Result_12_fu_416_p3[35] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd35;
    end else if (p_Result_12_fu_416_p3[36] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd36;
    end else if (p_Result_12_fu_416_p3[37] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd37;
    end else if (p_Result_12_fu_416_p3[38] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd38;
    end else if (p_Result_12_fu_416_p3[39] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd39;
    end else if (p_Result_12_fu_416_p3[40] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd40;
    end else if (p_Result_12_fu_416_p3[41] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd41;
    end else if (p_Result_12_fu_416_p3[42] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd42;
    end else if (p_Result_12_fu_416_p3[43] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd43;
    end else if (p_Result_12_fu_416_p3[44] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd44;
    end else if (p_Result_12_fu_416_p3[45] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd45;
    end else if (p_Result_12_fu_416_p3[46] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd46;
    end else if (p_Result_12_fu_416_p3[47] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd47;
    end else if (p_Result_12_fu_416_p3[48] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd48;
    end else if (p_Result_12_fu_416_p3[49] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd49;
    end else if (p_Result_12_fu_416_p3[50] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd50;
    end else if (p_Result_12_fu_416_p3[51] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd51;
    end else if (p_Result_12_fu_416_p3[52] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd52;
    end else if (p_Result_12_fu_416_p3[53] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd53;
    end else if (p_Result_12_fu_416_p3[54] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd54;
    end else if (p_Result_12_fu_416_p3[55] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd55;
    end else if (p_Result_12_fu_416_p3[56] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd56;
    end else if (p_Result_12_fu_416_p3[57] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd57;
    end else if (p_Result_12_fu_416_p3[58] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd58;
    end else if (p_Result_12_fu_416_p3[59] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd59;
    end else if (p_Result_12_fu_416_p3[60] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd60;
    end else if (p_Result_12_fu_416_p3[61] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd61;
    end else if (p_Result_12_fu_416_p3[62] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd62;
    end else if (p_Result_12_fu_416_p3[63] == 1'b1) begin
        tmp_s_fu_424_p3 = 64'd63;
    end else begin
        tmp_s_fu_424_p3 = 64'd64;
    end
end

assign trunc_ln1118_fu_373_p1 = tmp_V_fu_367_p2[19:0];

assign trunc_ln1225_fu_677_p1 = bitcast_ln1225_fu_664_p1[22:0];

assign trunc_ln1227_fu_725_p1 = bitcast_ln1227_fu_712_p1[22:0];

assign trunc_ln943_fu_436_p1 = tmp_s_fu_424_p3[7:0];

assign trunc_ln947_fu_467_p1 = sub_ln944_fu_440_p2[5:0];

assign trunc_ln954_fu_579_p1 = shl_ln954_fu_574_p2[31:0];

assign ush_fu_823_p3 = ((isNeg_reg_1023[0:0] === 1'b1) ? sext_ln1311_fu_820_p1 : add_ln339_reg_1018);

assign xor_ln949_fu_512_p2 = (tmp_71_fu_504_p3 ^ 1'd1);

assign zext_ln1287_fu_837_p1 = $unsigned(sext_ln1311_1_fu_829_p1);

assign zext_ln339_fu_783_p1 = tmp_V_2_fu_769_p4;

assign zext_ln662_fu_861_p1 = tmp_75_fu_853_p3;

assign zext_ln682_fu_816_p1 = mantissa_V_fu_807_p4;

assign zext_ln938_1_fu_551_p1 = tmp_V_1_reg_947_pp0_iter3_reg;

assign zext_ln938_fu_402_p1 = tmp_V_1_fu_396_p3;

assign zext_ln947_fu_477_p1 = sub_ln947_fu_471_p2;

assign zext_ln954_fu_570_p1 = sub_ln954_fu_565_p2;

always @ (posedge ap_clk) begin
    zext_ln938_reg_952[43:20] <= 24'b000000000000000000000000;
    zext_ln938_reg_952_pp0_iter3_reg[43:20] <= 24'b000000000000000000000000;
    or_ln_reg_975[31:1] <= 31'b0000000000000000000000000000000;
end

endmodule //Loop_1_proc378
