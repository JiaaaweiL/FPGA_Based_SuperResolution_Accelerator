// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CORRELATE (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        prev_output_channel_V_address0,
        prev_output_channel_V_ce0,
        prev_output_channel_V_q0,
        filter_0_V_read,
        correlate_img_V_address0,
        correlate_img_V_ce0,
        correlate_img_V_we0,
        correlate_img_V_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] prev_output_channel_V_address0;
output   prev_output_channel_V_ce0;
input  [11:0] prev_output_channel_V_q0;
input  [5:0] filter_0_V_read;
output  [5:0] correlate_img_V_address0;
output   correlate_img_V_ce0;
output   correlate_img_V_we0;
output  [11:0] correlate_img_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg prev_output_channel_V_ce0;
reg correlate_img_V_ce0;
reg correlate_img_V_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [15:0] sext_ln1192_fu_139_p1;
reg  signed [15:0] sext_ln1192_reg_212;
wire   [31:0] zext_ln29_fu_143_p1;
reg   [31:0] zext_ln29_reg_217;
wire    ap_CS_fsm_state2;
wire   [6:0] index_output_value_fu_153_p2;
reg   [6:0] index_output_value_reg_225;
wire   [31:0] zext_ln37_fu_159_p1;
reg   [31:0] zext_ln37_reg_230;
wire   [0:0] icmp_ln29_1_fu_147_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln37_fu_168_p2;
wire   [31:0] k_y_3_fu_178_p2;
reg   [31:0] k_y_3_reg_243;
reg  signed [11:0] prev_output_channel_3_reg_248;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [6:0] column_index_after_s_reg_80;
wire    ap_CS_fsm_state3;
wire   [0:0] ap_phi_mux_k_x_0_phi_fu_110_p4;
reg   [11:0] p_087_0_reg_92;
reg   [0:0] k_x_0_reg_105;
reg   [11:0] p_Val2_s_reg_118;
reg  signed [31:0] k_y_0_reg_130;
wire   [63:0] zext_ln44_fu_163_p1;
wire  signed [63:0] sext_ln40_fu_173_p1;
wire  signed [15:0] grp_fu_204_p3;
wire  signed [5:0] grp_fu_204_p0;
wire   [15:0] grp_fu_204_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

FSRCNN_mac_muladdqcK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
FSRCNN_mac_muladdqcK_U32(
    .din0(grp_fu_204_p0),
    .din1(prev_output_channel_3_reg_248),
    .din2(grp_fu_204_p2),
    .dout(grp_fu_204_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        column_index_after_s_reg_80 <= 7'd0;
    end else if (((ap_phi_mux_k_x_0_phi_fu_110_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        column_index_after_s_reg_80 <= index_output_value_reg_225;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_x_0_reg_105 <= 1'd1;
    end else if (((icmp_ln29_1_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_x_0_reg_105 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_y_0_reg_130 <= k_y_3_reg_243;
    end else if (((ap_phi_mux_k_x_0_phi_fu_110_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_y_0_reg_130 <= zext_ln29_reg_217;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_087_0_reg_92 <= p_Val2_s_reg_118;
    end else if (((icmp_ln29_1_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_087_0_reg_92 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_s_reg_118 <= {{grp_fu_204_p3[15:4]}};
    end else if (((ap_phi_mux_k_x_0_phi_fu_110_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_Val2_s_reg_118 <= p_087_0_reg_92;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        index_output_value_reg_225 <= index_output_value_fu_153_p2;
        zext_ln29_reg_217[6 : 0] <= zext_ln29_fu_143_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        k_y_3_reg_243 <= k_y_3_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        prev_output_channel_3_reg_248 <= prev_output_channel_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sext_ln1192_reg_212 <= sext_ln1192_fu_139_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_1_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln37_reg_230[6 : 0] <= zext_ln37_fu_159_p1[6 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln29_1_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_1_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        correlate_img_V_ce0 = 1'b1;
    end else begin
        correlate_img_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_phi_mux_k_x_0_phi_fu_110_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        correlate_img_V_we0 = 1'b1;
    end else begin
        correlate_img_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        prev_output_channel_V_ce0 = 1'b1;
    end else begin
        prev_output_channel_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln29_1_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_phi_mux_k_x_0_phi_fu_110_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln37_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_phi_mux_k_x_0_phi_fu_110_p4 = k_x_0_reg_105;

assign correlate_img_V_address0 = zext_ln44_fu_163_p1;

assign correlate_img_V_d0 = p_087_0_reg_92;

assign grp_fu_204_p0 = sext_ln1192_reg_212;

assign grp_fu_204_p2 = {{p_Val2_s_reg_118}, {4'd0}};

assign icmp_ln29_1_fu_147_p2 = ((column_index_after_s_reg_80 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_168_p2 = (($signed(k_y_0_reg_130) < $signed(zext_ln37_reg_230)) ? 1'b1 : 1'b0);

assign index_output_value_fu_153_p2 = (column_index_after_s_reg_80 + 7'd1);

assign k_y_3_fu_178_p2 = ($signed(k_y_0_reg_130) + $signed(32'd1));

assign prev_output_channel_V_address0 = sext_ln40_fu_173_p1;

assign sext_ln1192_fu_139_p1 = $signed(filter_0_V_read);

assign sext_ln40_fu_173_p1 = k_y_0_reg_130;

assign zext_ln29_fu_143_p1 = column_index_after_s_reg_80;

assign zext_ln37_fu_159_p1 = index_output_value_fu_153_p2;

assign zext_ln44_fu_163_p1 = column_index_after_s_reg_80;

always @ (posedge ap_clk) begin
    zext_ln29_reg_217[31:7] <= 25'b0000000000000000000000000;
    zext_ln37_reg_230[31:7] <= 25'b0000000000000000000000000;
end

endmodule //CORRELATE
